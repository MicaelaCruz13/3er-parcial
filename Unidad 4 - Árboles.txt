Unidad 4 Árboles

● El nodo 10 es la raíz (inicio del árbol).
● Tiene dos hijos: 5 (izquierdo) y 15 (derecho).
● El 5 tiene a su vez dos hijos: 3 y 7.
● Los nodos sin hijos se llaman hojas.



¿Para qué sirven los 
árboles binarios?

● Para ordenar datos 
rápidamente.

● Para búsquedas eficientes 
(como en Google).

● Para representar jerarquías o 
decisiones.

//Estructura del nodo
struct Nodo (
int dato;
struct Nodo* izquierdo ;
struct Nodo* derecho;

// Crear nuevO nodo
struct Nodo* nuevoNodo (int valor){
struct Nodo* nodo = (struct Nodo*)malloc (sizeof (struct Nodo));
nodo->dato = valor;
nodo->izquierdo = NULL;
nodo->derecho = NULL;
return nodo;

// Insertar un valor en el árbol
struct Nodo* insertar (struct Nodo* raiz, int valor) {
if (raiz == NULL) {
return nuevoNodo (valor);
if (valor < raiz->dato) {
raiz->izquierdo = insertar (raiz->izquierdo, valor);
} else {
raiz->derecho = insertar (raiz->derecho, valor);
return raiz;

// Recorrido inorden
void inorden(struct Nodo* raiz) {
1f (raiz ļ= NULL) {
inorden (raiz->izquierdo);
printf("%d ", raiz-> dato);
inorden(raiz->derecho);
}

struct Nodo* raiz = NULL;
I/ Insertamos algunos va lores
raiz = insertar (raiz, 10);
insertar (raiz, 5);
insertar(raiz, 15);
insertar (raiz, 3);
insertar (raiz, 7);
printf("Recorrido inorden del árbol: ");
inorden(raiz); // Debería imprimir: 3 5 7 10 15